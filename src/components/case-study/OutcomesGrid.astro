---
interface Props {
  title?: string;
  subtitle?: string;
  showTopBorder?: boolean;
  outcomes: Array<{
    metricNumber: string;
    metricCaption: string;
  }>;
}

const { title, subtitle, showTopBorder = true, outcomes } = Astro.props;
---

<div class="outcomes-grid-component max-w-[960px] mx-auto">
  {showTopBorder && <hr class="border-t border-gray-300 w-full" />}
  <div class="outcomes-grid-inner flex flex-col md:flex-row gap-6 md:gap-12 mt-6">
    <div class="md:w-1/2 w-full flex flex-col">
      {title && <div class="text-h2 mb-1 md:mb-2">{title}</div>}
      {subtitle && <div class="text-body" style="color: #838383">{subtitle}</div>}
    </div>
    <div class="md:w-1/2 w-full">
      <div class="grid grid-cols-2 gap-6 md:gap-8">
        {outcomes.map((outcome) => (
          <div class="flex flex-col">
            <div class="text-metric" style="letter-spacing: -1px">{outcome.metricNumber}</div>
            <div class="text-caption mt-1 md:mt-2" style="color: #838383">
              {outcome.metricCaption}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
.outcomes-grid-component hr {
  margin-bottom: 24px;
}
@media (max-width: 640px) {
  .outcomes-grid-inner .text-h2 {
    margin-bottom: 4px !important;
  }
}
</style> 